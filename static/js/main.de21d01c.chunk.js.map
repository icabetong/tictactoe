{"version":3,"sources":["reportWebVitals.js","box/box.js","board/board.js","storage/storage.js","scoreboard/scoreboard.js","game/game.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Box","props","className","onClick","value","Board","onBoxClick","index","boxes","state","slice","history","findWinner","areAllBoxesClicked","xIsNext","push","setState","onRestart","_","Array","fill","status","winner","this","isFilled","to","length","map","move","Component","rows","i","a","b","c","count","forEach","item","Storage","storageName","initialValue","localStorage","getItem","setItem","JSON","parse","data","stringify","Scoreboard","scoreboard","getData","storage","leader","key","React","Game","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de21d01c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport './box.css';\n\nconst Box = (props) => {\n    return (\n        <button className=\"board-box\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nexport { Box }","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box } from '../box/box';\n\nimport './board.css';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            boxes: Array(9).fill(null),\n            history: [],\n            xIsNext: true,\n        }\n    }\n\n    onBoxClick = index => {\n        const boxes = this.state.boxes.slice();\n\n        let history = this.state.history;\n\n        if (findWinner(boxes) || boxes[index])\n            return;\n\n        if (areAllBoxesClicked(boxes) === true)\n            return;\n\n        boxes[index] = this.state.xIsNext ? 'x' : 'o';\n        history.push(this.state.xIsNext ? 'x' : 'o');\n\n        this.setState({\n            boxes: boxes,\n            history: history,\n            xIsNext: !this.state.xIsNext\n        })\n    }\n\n    onRestart = _ => {\n        this.setState({\n            boxes: Array(9).fill(null),\n            history: [],\n            xIsNext: true,\n        })\n    }\n\n    render() {\n        // Get winner (if there is any)\n    const winner = findWinner(this.state.boxes)\n\n        // Are all boxes checked?\n    const isFilled = areAllBoxesClicked(this.state.boxes)\n\n        // Status message\n    let status\n\n        if (winner) {\n            // If winner exists, create status message\n            status = `The winner is: ${winner}!`\n\n        } else if(!winner && isFilled) {\n            // If game is drawn, create status message\n            status = 'Game drawn!'\n\n        } else {\n            // If there is no winner and game is not drawn, ask the next player to make a move\n            status = `It is ${(this.state.xIsNext ? 'x' : 'o')}'s turn.`\n        }\n\n        return (\n            <Fragment>\n                {/* Link to scoreboard */}\n                <Link to=\"/\" className=\"board-link\">Go back to scoreboard</Link>\n\n                {/* The game board */}\n                <div className=\"board-wrapper\">\n                    <div className=\"board\">\n                        <h2 className=\"board-heading\">{status}</h2>\n\n                        <div className=\"board-row\">\n                            <Box value={this.state.boxes[0]} onClick={() => this.onBoxClick(0)} />\n\n                            <Box value={this.state.boxes[1]} onClick={() => this.onBoxClick(1)} />\n\n                            <Box value={this.state.boxes[2]} onClick={() => this.onBoxClick(2)} />\n                        </div>\n\n                        <div className=\"board-row\">\n                            <Box value={this.state.boxes[3]} onClick={() => this.onBoxClick(3)} />\n\n                            <Box value={this.state.boxes[4]} onClick={() => this.onBoxClick(4)} />\n\n                            <Box value={this.state.boxes[5]} onClick={() => this.onBoxClick(5)} />\n                        </div>\n\n                        <div className=\"board-row\">\n                            <Box value={this.state.boxes[6]} onClick={() => this.onBoxClick(6)} />\n\n                            <Box value={this.state.boxes[7]} onClick={() => this.onBoxClick(7)} />\n\n                            <Box value={this.state.boxes[8]} onClick={() => this.onBoxClick(8)} />\n                        </div>\n                    </div>\n\n                    <div className=\"board-history-container\">\n                        <h2 className=\"board-heading\">Moves history:</h2>\n\n                        {/* List with history of moves */}\n                        <ul className=\"board-history\">\n                            {this.state.history.length === 0 && <span>No moves to show.</span>}\n\n                            {this.state.history.length !== 0 && this.state.history.map((move, index) => {\n                                return <li key={index}>Move {index + 1}: <strong>{move}</strong></li>\n                            })}\n                        </ul>\n                    </div>\n                    \n                    {/* Button to start new game */}\n                    {winner && <div className=\"board-footer\">\n                        <button className=\"btn\" onClick={this.onRestart}>Start new game</button>\n                    </div>}\n                </div>\n\n                \n            </Fragment>\n        )\n    }\n}\n\nfunction findWinner(boxes) {\n    const rows = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n\n    for (let i = 0; i < rows.length; i++) {\n        const [a, b, c] = rows[i];\n\n        if (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\n            return boxes[a];\n        }\n    }\n\n    return null;\n}\n\nfunction areAllBoxesClicked(boxes) {\n    let count = 0;\n\n    boxes.forEach(function(item) {\n        if (item !== null) {\n            count++;\n        }\n    })\n\n    return count === 9;\n}\n\n\nexport { Board }","export class Storage {\n    constructor(storageName = 'gameScoreboard', initialValue = '[]') {\n      this.storageName = storageName\n  \n          // Check if localStorage contains any data from previous games\n      if (!localStorage.getItem(storageName)) {\n              // If not, create new item for our Tic Tac Toe game\n        localStorage.setItem(storageName, initialValue)\n      }\n    }\n  \n      // Load data from previous games from localStorage\n    getData() {\n      return JSON.parse(localStorage.getItem(this.storageName))\n    }\n  \n      // Update data in localStorage\n    update(data) {\n      localStorage.setItem(this.storageName, JSON.stringify(data))\n    }\n  }","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Storage } from './../storage/storage';\n\nimport './scoreboard.css';\n\nclass Scoreboard extends React.Component {\n\tstate = {\n\t\tscoreboard: []\n\t}\n\n\tasync componentDidMount() {\n\t\tlet storage = await new Storage().getData()\n\n\t\tthis.setState({\n\t\t\tscoreboard: storage\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<h1>Recent games:</h1>\n\n\t\t\t\t{/* List with previous games */}\n\t\t\t\t<ul>\n\t\t\t\t\t{this.state.scoreboard.map((leader, key) => {\n\t\t\t\t\t\treturn <li key={key}>{leader}</li>\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\n\t\t\t\t{/* Link to start new game */}\n\t\t\t\t<Link to=\"/board\">\n\t\t\t\t\t<button className=\"btn\">Start new game</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport { Scoreboard }","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'; \nimport { Board } from '../board/board';\nimport { Scoreboard } from '../scoreboard/scoreboard';\n\nclass Game extends Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <BrowserRouter>\n                    <Route exact path=\"/\" component={Scoreboard}/>\n                    <Route path=\"/board\" component={Board}/> \n                </BrowserRouter>\n            </div>\n        );\n    }\n}\n\nexport { Game }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Game } from './game/game';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}