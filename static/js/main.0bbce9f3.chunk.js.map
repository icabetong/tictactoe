{"version":3,"sources":["reportWebVitals.js","storage/storage.js","box/box.js","board/board.js","scoreboard/scoreboard.js","game/game.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Storage","storageName","initialValue","this","localStorage","getItem","setItem","JSON","parse","data","stringify","Box","props","className","onClick","value","Board","storage","onBoxClick","index","boxes","state","slice","history","findWinner","areAllBoxesClicked","xIsNext","push","setState","onRestart","_","Array","fill","status","winner","isGameDone","update","to","length","map","move","Component","rows","i","a","b","c","count","forEach","item","Scoreboard","scoreboard","getData","leader","key","React","Game","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bbce9f3.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","class Storage {\n\tconstructor(storageName = 'gameScoreboard', initialValue = '[]') {\n\t\tthis.storageName = storageName\n\n\t\t// Check if localStorage contains any data from previous games\n\t\tif (!localStorage.getItem(storageName)) {\n\t\t\t// If not, create new item for our Tic Tac Toe game\n\t\t\tlocalStorage.setItem(storageName, initialValue)\n\t\t}\n\t}\n\n\t// Load data from previous games from localStorage\n\tgetData() {\n\t\treturn JSON.parse(localStorage.getItem(this.storageName))\n\t}\n\n\t// Update data in localStorage\n\tupdate(data) {\n\t\tlocalStorage.setItem(this.storageName, JSON.stringify(data))\n\t}\n}\n\nexport { Storage }","import React from 'react';\n\nimport './box.css';\n\nconst Box = (props) => {\n    return (\n        <button className=\"board-box\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nexport { Box }","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Storage } from '../storage/storage';\nimport { Box } from '../box/box';\n\nimport './board.css';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            boxes: Array(9).fill(null),\n            history: [],\n            xIsNext: true,\n        }\n    }\n\n    storage = new Storage();\n\n    onBoxClick = index => {\n        const boxes = this.state.boxes.slice();\n\n        let history = this.state.history;\n\n        if (findWinner(boxes) || boxes[index])\n            return;\n\n        if (areAllBoxesClicked(boxes) === true)\n            return;\n\n        boxes[index] = this.state.xIsNext ? 'x' : 'o';\n        history.push(this.state.xIsNext ? 'x' : 'o');\n\n        this.setState({\n            boxes: boxes,\n            history: history,\n            xIsNext: !this.state.xIsNext\n        })\n    }\n\n    onRestart = _ => {\n        this.setState({\n            boxes: Array(9).fill(null),\n            history: [],\n            xIsNext: true,\n        })\n    }\n\n    render() {\n        const winner = findWinner(this.state.boxes);\n        const isGameDone = areAllBoxesClicked(this.state.boxes);\n\n        // Status message\n        let status\n        if (winner) {\n            // winner exists, create message\n            status = `The winner is: ${winner}!`;\n            this.storage.update([`${winner} won`])\n        } else if (!winner && isGameDone) {\n            // game is drawn, craeate message\n            status = 'Game drawn!';\n\n            this.storage.update([`Game drawn`])\n        } else {\n            status = `It is ${(this.state.xIsNext ? 'x' : 'o')}'s turn.`;\n        }\n\n        return (\n            <Fragment>\n                {/* Link to scoreboard */}\n                <Link to=\"/\" className=\"board-link\">Go back to Scoreboard</Link>\n\n                {/* The game board */}\n                <div className=\"board-wrapper\">\n                    <div className=\"board\">\n                        <h2 className=\"board-heading\">{status}</h2>\n\n                        <div className=\"board-row\">\n                            <Box value={this.state.boxes[0]} onClick={() => this.onBoxClick(0)} />\n\n                            <Box value={this.state.boxes[1]} onClick={() => this.onBoxClick(1)} />\n\n                            <Box value={this.state.boxes[2]} onClick={() => this.onBoxClick(2)} />\n                        </div>\n\n                        <div className=\"board-row\">\n                            <Box value={this.state.boxes[3]} onClick={() => this.onBoxClick(3)} />\n\n                            <Box value={this.state.boxes[4]} onClick={() => this.onBoxClick(4)} />\n\n                            <Box value={this.state.boxes[5]} onClick={() => this.onBoxClick(5)} />\n                        </div>\n\n                        <div className=\"board-row\">\n                            <Box value={this.state.boxes[6]} onClick={() => this.onBoxClick(6)} />\n\n                            <Box value={this.state.boxes[7]} onClick={() => this.onBoxClick(7)} />\n\n                            <Box value={this.state.boxes[8]} onClick={() => this.onBoxClick(8)} />\n                        </div>\n                    </div>\n\n                    <div className=\"board-history-container\">\n                        <h2 className=\"board-heading\">Moves history:</h2>\n\n                        {/* List with history of moves */}\n                        <ul className=\"board-history\">\n                            {this.state.history.length === 0 && <span>No moves to show.</span>}\n\n                            {this.state.history.length !== 0 && this.state.history.map((move, index) => {\n                                return <li key={index}>Move {index + 1}: <strong>{move}</strong></li>\n                            })}\n                        </ul>\n                    </div>\n                    \n                    {/* Button to start new game */}\n                    {(isGameDone || winner) && <div className=\"board-footer\">\n                        <button className=\"btn\" onClick={this.onRestart}>Start new game</button>\n                    </div>}\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nfunction findWinner(boxes) {\n    const rows = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n\n    for (let i = 0; i < rows.length; i++) {\n        const [a, b, c] = rows[i];\n\n        if (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\n            return boxes[a];\n        }\n    }\n    return null;\n}\n\nfunction areAllBoxesClicked(boxes) {\n    let count = 0;\n\n    boxes.forEach(function(item) {\n        if (item !== null) {\n            count++;\n        }\n    })\n    return count === 9;\n}\n\n\nexport { Board }","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Storage } from './../storage/storage';\n\nimport './scoreboard.css';\n\nclass Scoreboard extends React.Component {\n\tstate = {\n\t\tscoreboard: []\n\t}\n\n\tasync componentDidMount() {\n\t\tlet storage = await new Storage().getData()\n\n\t\tthis.setState({\n\t\t\tscoreboard: storage\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<h1>Recent games:</h1>\n\n\t\t\t\t{/* List with previous games */}\n\t\t\t\t<ul>\n\t\t\t\t\t{this.state.scoreboard.map((leader, key) => {\n\t\t\t\t\t\treturn <li key={key}>{leader}</li>\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\n\t\t\t\t{/* Link to start new game */}\n\t\t\t\t<Link to=\"/board\">\n\t\t\t\t\t<button className=\"btn\">Start new game</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport { Scoreboard }","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom'; \nimport { Board } from '../board/board';\nimport { Scoreboard } from '../scoreboard/scoreboard';\n\nclass Game extends Component {\n    render() {\n        return (\n            <div className=\"app\">\n                <HashRouter>\n                    <Route exact path=\"/\" component={Scoreboard}/>\n                    <Route exact path=\"/board\" component={Board}/>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n\nexport { Game }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Game } from './game/game';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}